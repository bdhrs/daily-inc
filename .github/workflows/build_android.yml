name: Build Android and Release

on:
  workflow_dispatch:
    inputs:
      is_release:
        description: 'Is this a release build? (will increment minor version)'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  build-android:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-deps-${{ hashFiles('pubspec.lock') }}

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Read current version
        id: current_version
        run: echo "CURRENT_VERSION=$(cat version.txt)" >> $GITHUB_OUTPUT

      - name: Set version
        id: set_version
        run: |
          # Read current version
          CURRENT_VERSION="${{ steps.current_version.outputs.CURRENT_VERSION }}"
          echo "Current version: $CURRENT_VERSION"
          
          # Split into major, minor, and patch
          MAJOR_VERSION=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR_VERSION=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH_VERSION=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          # If this is a release build, increment the minor version
          if [[ "${{ github.event.inputs.is_release }}" == "true" ]]; then
            MINOR_VERSION=$((MINOR_VERSION + 1))
            # Reset patch version to 0 when incrementing minor version
            PATCH_VERSION=0
            NEW_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION"
            echo "Incrementing minor version for release: $NEW_VERSION"
            
            # Update version.txt for future builds
            echo "$NEW_VERSION" > version.txt
          else
            NEW_VERSION="$CURRENT_VERSION"
            echo "Using current version for build: $NEW_VERSION"
          fi
          
          # Set output for later steps
          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update version in pubspec.yaml
          sed -i "s/^version: .*/version: $NEW_VERSION+${{ github.run_number }}/" pubspec.yaml
          
          # Update version in Android build.gradle.kts
          sed -i "s/versionCode = .*/versionCode = ${{ github.run_number }}/" android/app/build.gradle.kts
          sed -i "s/versionName = .*/versionName = \"$NEW_VERSION\"/" android/app/build.gradle.kts

      - run: flutter pub get
      - run: flutter analyze
      - run: flutter test
      - run: flutter build apk --build-number=${{ github.run_number }}
        env:
          JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64

      - name: Rename APK
        run: mv build/app/outputs/apk/release/app-release.apk build/app/outputs/apk/release/daily-inc.apk

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: build/app/outputs/apk/release/daily-inc.apk

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.event.inputs.is_release == 'true' && 'Release' || 'Test Build' }} v${{ steps.set_version.outputs.VERSION }}
          tag_name: v${{ steps.set_version.outputs.VERSION }}+${{ github.run_number }}
          draft: ${{ github.event.inputs.is_release != 'true' }}
          prerelease: ${{ github.event.inputs.is_release != 'true' }}
          files: build/app/outputs/apk/release/daily-inc.apk
